@page "/NuevoProyecto"
@using System.Text.Json
@inject HttpClient Http
@inject Radzen.DialogService DialogService

<RadzenDialog @ref="DialogNuevoResponsables" />

<RadzenTemplateForm TItem="CrearProyectoDto" Data=@proyecto Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
    <div class="row">
        <div class="col-lg-4 d-flex">
            <h7 class="mb-0">Proyecto</h7>
        </div>
        <div class="col-lg-4 d-flex">
            <h7 class="mb-0">Fecha Aprobación</h7>
        </div>
        <div class="col-lg-4 d-flex">

        </div>
    </div>

    <div class="row">
        <div class="col-lg-4 d-flex">
            <RadzenTextBox Change=@(args => OnChange(args, "TextBox")) Name="Clave" @bind-Value=@proyecto.Clave Class="w-100" style="display: block" />
            <RadzenRequiredValidator Component="Clave" Text="" Popup=@popup Style="position: absolute" />
        </div>
        <div class="col-lg-4 d-flex">
            <RadzenDatePicker @bind-Value=@FechaAprobacion DateFormat="dd/MM/yyyy"
                              Change=@(args => OnChangeFechaAprobacion(args, "DatePicker", "MM/dd/yyyy")) Class="w-100" />
        </div>
        <div class="col-lg-4 d-flex" style="margin-top: 7px; justify-content: center;">
            <RadzenCheckBox @bind-Value=@IsActive Name="CheckBox1" TValue="bool" Change=@(args => OnChangeIsActive(args, "CheckBox1 CheckBox")) />
            <RadzenLabel Text="Activo" Component="Activo" Style="margin-left: 8px; vertical-align: middle;" />
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12 d-flex">
            <h7 class="mt-2">Título</h7>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12 d-flex">
            <RadzenTextArea Cols="30" Rows="3" Change=@(args => OnChangeTitulo(args, "TextArea")) Name="Titulo" @bind-Value=@proyecto.Titulo Class="w-100" />
            <RadzenRequiredValidator Component="Titulo" Text="" Popup=@popup Style="position: absolute" />
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12 d-flex">
            <h7 class="mt-2">Notas</h7>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12 d-flex">
            <RadzenTextArea Cols="30" Rows="3" Change=@(args => OnChangeNotas(args, "TextArea")) Class="w-100" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 text-right pt-3">
            <div style="display:inline">
                <RadzenButton ButtonStyle="ButtonStyle.Light" Click="@MostrarResponsables" Text="Responsables" Style="text-align:left"></RadzenButton>
            </div>
            <RadzenButton Click="@((args) => DialogService.Close(false))" ButtonStyle="ButtonStyle.Primary" Text="Cancel" Style="width: 120px" Class="mr-1" />
            @*<RadzenButton Click="@((args) => dialogService.Close(true))" Text="OK" Style="width: 120px" />*@
            <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Secondary" Text="Aceptar"></RadzenButton>
        </div>
    </div>
</RadzenTemplateForm>

@*<EventConsole @ref=@console Class="mt-4" />*@

@code {
    [Parameter] public Guid Id { get; set; }

    //EventConsole console;

    DateTime FechaAprobacion = DateTime.Now;
    bool IsActive = true;
    private string errorMessage;
    private RadzenDialog DialogNuevoResponsables;

    private IList<GetAllProyectosDto> proyectosDto;

    protected override async Task OnInitializedAsync()
    {
        DialogService.OnOpen += Open;
        DialogService.OnClose += Close;

        using var httpResponse = await Http.GetAsync("api/GetAllIsActiveProyectos/GetAllIsActive");

        if (!httpResponse.IsSuccessStatusCode)
        {
            // set error message for display, log to console and return
            errorMessage = httpResponse.ReasonPhrase;
            Console.WriteLine($"There was an error! {errorMessage}");
            return;
        }

        // convert http response data to UsersResponse object
        proyectosDto = await httpResponse.Content.ReadFromJsonAsync<List<GetAllProyectosDto>>();

        //selected = proyectosDto.Take(1).ToList();

    }

    void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        //console.Log("Dialog opened");
    }

    void Close(dynamic result)
    {
        //console.Log($"Dialog closed");
    }


    void OnChange(string value, string name)
    {
        //console.Log($"{name} value changed to {value}");
    }
    void OnChangeFechaAprobacion(DateTime? value, string name, string format)
    {
        //console.Log($"{name} value changed to {value?.ToString(format)}");
    }
    void OnChangeTitulo(string name, string format)
    {
        //console.Log($"{name} value changed to {value?.ToString(format)}");
    }
    void OnChangeNotas(string name, string format)
    {
        //console.Log($"{name} value changed to {value?.ToString(format)}");
    }
    void OnChangeIsActive(bool estado, string name)
    {
        //console.Log($"{name} value changed to {value?.ToString(format)}");
    }

    bool popup;

    CrearProyectoDto proyecto = new CrearProyectoDto();

    void OnSubmit(CrearProyectoDto proyecto)
    {
        //console.Log($"Submit: {JsonSerializer.Serialize(model, new JsonSerializerOptions() { WriteIndented = true })}");
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        //console.Log($"InvalidSubmit: {JsonSerializer.Serialize(args, new JsonSerializerOptions() { WriteIndented = true })}");
    }

    public async Task MostrarResponsables()
    {
        await DialogService.OpenAsync<NuevoResponsables>("Título",
               new Dictionary<string, object>() { { "Id", Guid.NewGuid() } },
               new DialogOptions()
               {
                   Left = "340px",
                   Top = "200px",
                   Width = "900px",
                   Height = "455px",
                   Resizable = false,
                   Draggable = true,
                   CloseDialogOnOverlayClick = true
               });
    }
}
